{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "6099698b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "6e68fb5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Jeep Compass 2.0 Longitude Option BSIV</td>\n",
       "      <td>10.03 Lakh</td>\n",
       "      <td>86,226 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Renault Duster RXZ Turbo CVT</td>\n",
       "      <td>12.83 Lakh</td>\n",
       "      <td>13,248 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Toyota Camry 2.5 G</td>\n",
       "      <td>16.40 Lakh</td>\n",
       "      <td>60,343 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Honda Jazz VX CVT</td>\n",
       "      <td>7.77 Lakh</td>\n",
       "      <td>26,696 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Volkswagen Polo 1.2 MPI Highline</td>\n",
       "      <td>5.15 Lakh</td>\n",
       "      <td>69,414 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0                                car_name car_prices_in_rupee  \\\n",
       "0           0  Jeep Compass 2.0 Longitude Option BSIV          10.03 Lakh   \n",
       "1           1            Renault Duster RXZ Turbo CVT          12.83 Lakh   \n",
       "2           2                      Toyota Camry 2.5 G          16.40 Lakh   \n",
       "3           3                       Honda Jazz VX CVT           7.77 Lakh   \n",
       "4           4        Volkswagen Polo 1.2 MPI Highline           5.15 Lakh   \n",
       "\n",
       "   kms_driven fuel_type transmission  ownership  manufacture   engine    Seats  \n",
       "0  86,226 kms    Diesel       Manual  1st Owner       2017.0  1956 cc  5 Seats  \n",
       "1  13,248 kms    Petrol    Automatic  1st Owner       2021.0  1330 cc  5 Seats  \n",
       "2  60,343 kms    Petrol    Automatic  1st Owner       2016.0  2494 cc  5 Seats  \n",
       "3  26,696 kms    Petrol    Automatic  1st Owner       2018.0  1199 cc  5 Seats  \n",
       "4  69,414 kms    Petrol       Manual  1st Owner       2016.0  1199 cc  5 Seats  "
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"car_price.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "da3428c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5512, 10)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "07aec5f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep Compass 2.0 Longitude Option BSIV</td>\n",
       "      <td>10.03 Lakh</td>\n",
       "      <td>86,226 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault Duster RXZ Turbo CVT</td>\n",
       "      <td>12.83 Lakh</td>\n",
       "      <td>13,248 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota Camry 2.5 G</td>\n",
       "      <td>16.40 Lakh</td>\n",
       "      <td>60,343 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda Jazz VX CVT</td>\n",
       "      <td>7.77 Lakh</td>\n",
       "      <td>26,696 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen Polo 1.2 MPI Highline</td>\n",
       "      <td>5.15 Lakh</td>\n",
       "      <td>69,414 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 car_name car_prices_in_rupee  kms_driven  \\\n",
       "0  Jeep Compass 2.0 Longitude Option BSIV          10.03 Lakh  86,226 kms   \n",
       "1            Renault Duster RXZ Turbo CVT          12.83 Lakh  13,248 kms   \n",
       "2                      Toyota Camry 2.5 G          16.40 Lakh  60,343 kms   \n",
       "3                       Honda Jazz VX CVT           7.77 Lakh  26,696 kms   \n",
       "4        Volkswagen Polo 1.2 MPI Highline           5.15 Lakh  69,414 kms   \n",
       "\n",
       "  fuel_type transmission  ownership  manufacture   engine    Seats  \n",
       "0    Diesel       Manual  1st Owner       2017.0  1956 cc  5 Seats  \n",
       "1    Petrol    Automatic  1st Owner       2021.0  1330 cc  5 Seats  \n",
       "2    Petrol    Automatic  1st Owner       2016.0  2494 cc  5 Seats  \n",
       "3    Petrol    Automatic  1st Owner       2018.0  1199 cc  5 Seats  \n",
       "4    Petrol       Manual  1st Owner       2016.0  1199 cc  5 Seats  "
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.drop(\"Unnamed: 0\", axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "d816d807",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1297</th>\n",
       "      <td>Mercedes-Benz GLS 350d Grand Edition</td>\n",
       "      <td>59.50 Lakh</td>\n",
       "      <td>45,000 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>2nd Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2499 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1351</th>\n",
       "      <td>Honda Jazz 1.2 V AT i VTEC</td>\n",
       "      <td>6.90 Lakh</td>\n",
       "      <td>27,200 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1462 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1352</th>\n",
       "      <td>Mahindra Thar CRDe</td>\n",
       "      <td>7.72 Lakh</td>\n",
       "      <td>46,365 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1461 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1353</th>\n",
       "      <td>Maruti Ciaz Alpha BSIV</td>\n",
       "      <td>8.72 Lakh</td>\n",
       "      <td>82,496 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>1248 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1354</th>\n",
       "      <td>Renault Duster 110PS Diesel RxL AMT</td>\n",
       "      <td>6.51 Lakh</td>\n",
       "      <td>73,656 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1493 cc</td>\n",
       "      <td>7 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5301</th>\n",
       "      <td>Mercedes-Benz E-Class E250 CDI Avantgarde</td>\n",
       "      <td>25.90 Lakh</td>\n",
       "      <td>60,625 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>2nd Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1197 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5318</th>\n",
       "      <td>Mercedes-Benz E-Class Exclusive E 220d</td>\n",
       "      <td>76.25 Lakh</td>\n",
       "      <td>2,000 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2022.0</td>\n",
       "      <td>1950 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5322</th>\n",
       "      <td>BMW X3 xDrive 20d Luxury Line</td>\n",
       "      <td>60 Lakh</td>\n",
       "      <td>19,000 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1997 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5338</th>\n",
       "      <td>Volvo S90 D4 Inscription BSIV</td>\n",
       "      <td>44.75 Lakh</td>\n",
       "      <td>20,000 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1950 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5493</th>\n",
       "      <td>Land Rover Discovery Sport TD4 HSE 7S</td>\n",
       "      <td>48.75 Lakh</td>\n",
       "      <td>38,000 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2020.0</td>\n",
       "      <td>1197 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>75 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       car_name car_prices_in_rupee  \\\n",
       "1297       Mercedes-Benz GLS 350d Grand Edition          59.50 Lakh   \n",
       "1351                 Honda Jazz 1.2 V AT i VTEC           6.90 Lakh   \n",
       "1352                         Mahindra Thar CRDe           7.72 Lakh   \n",
       "1353                     Maruti Ciaz Alpha BSIV           8.72 Lakh   \n",
       "1354        Renault Duster 110PS Diesel RxL AMT           6.51 Lakh   \n",
       "...                                         ...                 ...   \n",
       "5301  Mercedes-Benz E-Class E250 CDI Avantgarde          25.90 Lakh   \n",
       "5318     Mercedes-Benz E-Class Exclusive E 220d          76.25 Lakh   \n",
       "5322              BMW X3 xDrive 20d Luxury Line             60 Lakh   \n",
       "5338              Volvo S90 D4 Inscription BSIV          44.75 Lakh   \n",
       "5493      Land Rover Discovery Sport TD4 HSE 7S          48.75 Lakh   \n",
       "\n",
       "      kms_driven fuel_type transmission  ownership  manufacture   engine  \\\n",
       "1297  45,000 kms    Diesel    Automatic  2nd Owner       2016.0  2499 cc   \n",
       "1351  27,200 kms    Petrol    Automatic  1st Owner       2017.0  1462 cc   \n",
       "1352  46,365 kms    Diesel       Manual  1st Owner       2017.0  1461 cc   \n",
       "1353  82,496 kms    Petrol       Manual  1st Owner       2019.0  1248 cc   \n",
       "1354  73,656 kms    Diesel    Automatic  1st Owner       2016.0  1493 cc   \n",
       "...          ...       ...          ...        ...          ...      ...   \n",
       "5301  60,625 kms    Diesel    Automatic  2nd Owner       2016.0  1197 cc   \n",
       "5318   2,000 kms    Diesel    Automatic  1st Owner       2022.0  1950 cc   \n",
       "5322  19,000 kms    Diesel    Automatic  1st Owner       2021.0  1997 cc   \n",
       "5338  20,000 kms    Diesel    Automatic  1st Owner       2018.0  1950 cc   \n",
       "5493  38,000 kms    Diesel    Automatic  1st Owner       2020.0  1197 cc   \n",
       "\n",
       "        Seats  \n",
       "1297  5 Seats  \n",
       "1351  5 Seats  \n",
       "1352  5 Seats  \n",
       "1353  5 Seats  \n",
       "1354  7 Seats  \n",
       "...       ...  \n",
       "5301  5 Seats  \n",
       "5318  5 Seats  \n",
       "5322  5 Seats  \n",
       "5338  5 Seats  \n",
       "5493  5 Seats  \n",
       "\n",
       "[75 rows x 9 columns]"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "771ce935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "car_name                2\n",
       "car_prices_in_rupee     8\n",
       "kms_driven             18\n",
       "fuel_type              11\n",
       "transmission           12\n",
       "ownership              11\n",
       "manufacture            15\n",
       "engine                 13\n",
       "Seats                  10\n",
       "dtype: int64"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "1dd7a954",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna(subset=[\"car_name\", \"car_prices_in_rupee\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "0f87f9a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"fuel_type\"] = df[\"fuel_type\"].fillna(df[\"fuel_type\"].mode()[0])\n",
    "df[\"transmission\"] = df[\"transmission\"].fillna(df[\"transmission\"].mode()[0])\n",
    "df[\"ownership\"] = df[\"ownership\"].fillna(df[\"ownership\"].mode()[0])\n",
    "df[\"manufacture\"] = df[\"manufacture\"].fillna(df[\"manufacture\"].mode()[0])\n",
    "df[\"Seats\"] = df[\"Seats\"].fillna(df[\"Seats\"].mode()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "9704697f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "car_name                0\n",
       "car_prices_in_rupee     0\n",
       "kms_driven             18\n",
       "fuel_type               0\n",
       "transmission            0\n",
       "ownership               0\n",
       "manufacture             0\n",
       "engine                 13\n",
       "Seats                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "694cf073",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>10.03 Lakh</td>\n",
       "      <td>86,226 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>12.83 Lakh</td>\n",
       "      <td>13,248 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>16.40 Lakh</td>\n",
       "      <td>60,343 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>7.77 Lakh</td>\n",
       "      <td>26,696 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>5.15 Lakh</td>\n",
       "      <td>69,414 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name car_prices_in_rupee  kms_driven fuel_type transmission  \\\n",
       "0        Jeep          10.03 Lakh  86,226 kms    Diesel       Manual   \n",
       "1     Renault          12.83 Lakh  13,248 kms    Petrol    Automatic   \n",
       "2      Toyota          16.40 Lakh  60,343 kms    Petrol    Automatic   \n",
       "3       Honda           7.77 Lakh  26,696 kms    Petrol    Automatic   \n",
       "4  Volkswagen           5.15 Lakh  69,414 kms    Petrol       Manual   \n",
       "\n",
       "   ownership  manufacture   engine    Seats  \n",
       "0  1st Owner       2017.0  1956 cc  5 Seats  \n",
       "1  1st Owner       2021.0  1330 cc  5 Seats  \n",
       "2  1st Owner       2016.0  2494 cc  5 Seats  \n",
       "3  1st Owner       2018.0  1199 cc  5 Seats  \n",
       "4  1st Owner       2016.0  1199 cc  5 Seats  "
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def extract_car_brand(car_name):\n",
    "    car_brand = car_name.split()[0]\n",
    "    return car_brand\n",
    "\n",
    "df[\"car_name\"] = df[\"car_name\"].apply(extract_car_brand)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "f20a4adb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Maruti           1389\n",
       "Hyundai          1018\n",
       "Honda             496\n",
       "Mahindra          315\n",
       "Mercedes-Benz     283\n",
       "Tata              268\n",
       "Toyota            263\n",
       "BMW               172\n",
       "Renault           170\n",
       "Ford              168\n",
       "Audi              166\n",
       "Volkswagen        159\n",
       "Skoda             113\n",
       "Chevrolet          82\n",
       "Nissan             63\n",
       "MG                 62\n",
       "Kia                61\n",
       "Land               50\n",
       "Jeep               49\n",
       "Volvo              31\n",
       "Jaguar             30\n",
       "Datsun             24\n",
       "Fiat               17\n",
       "Mini               14\n",
       "Porsche            10\n",
       "Lexus              10\n",
       "Mitsubishi          8\n",
       "Maserati            5\n",
       "Isuzu               4\n",
       "Force               1\n",
       "Premier             1\n",
       "Bentley             1\n",
       "Name: car_name, dtype: int64"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"car_name\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "c865c71f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86,226 kms</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13,248 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60,343 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26,696 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69,414 kms</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven fuel_type transmission  \\\n",
       "0        Jeep            1003000.0  86,226 kms    Diesel       Manual   \n",
       "1     Renault            1283000.0  13,248 kms    Petrol    Automatic   \n",
       "2      Toyota            1640000.0  60,343 kms    Petrol    Automatic   \n",
       "3       Honda             777000.0  26,696 kms    Petrol    Automatic   \n",
       "4  Volkswagen             515000.0  69,414 kms    Petrol       Manual   \n",
       "\n",
       "   ownership  manufacture   engine    Seats  \n",
       "0  1st Owner       2017.0  1956 cc  5 Seats  \n",
       "1  1st Owner       2021.0  1330 cc  5 Seats  \n",
       "2  1st Owner       2016.0  2494 cc  5 Seats  \n",
       "3  1st Owner       2018.0  1199 cc  5 Seats  \n",
       "4  1st Owner       2016.0  1199 cc  5 Seats  "
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def extract_price(car_price):\n",
    "    car_price_elements = car_price.split()\n",
    "    if car_price_elements[-1] == \"Lakh\":\n",
    "        return float(car_price_elements[0]) * 100000 # 1,00,000\n",
    "    elif car_price_elements[-1] == \"Crore\":\n",
    "        return float(car_price_elements[0]) * 10000000 # 1,00,00,000\n",
    "    else:\n",
    "        return float(car_price_elements[0].replace(\",\", \"\")) # 69,420 -> 69420.00\n",
    "\n",
    "df[\"car_prices_in_rupee\"] = df[\"car_prices_in_rupee\"].apply(extract_price)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "31edd931",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven fuel_type transmission  \\\n",
       "0        Jeep            1003000.0     86226.0    Diesel       Manual   \n",
       "1     Renault            1283000.0     13248.0    Petrol    Automatic   \n",
       "2      Toyota            1640000.0     60343.0    Petrol    Automatic   \n",
       "3       Honda             777000.0     26696.0    Petrol    Automatic   \n",
       "4  Volkswagen             515000.0     69414.0    Petrol       Manual   \n",
       "\n",
       "   ownership  manufacture   engine    Seats  \n",
       "0  1st Owner       2017.0  1956 cc  5 Seats  \n",
       "1  1st Owner       2021.0  1330 cc  5 Seats  \n",
       "2  1st Owner       2016.0  2494 cc  5 Seats  \n",
       "3  1st Owner       2018.0  1199 cc  5 Seats  \n",
       "4  1st Owner       2016.0  1199 cc  5 Seats  "
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def convert_km_to_numbers(kms):\n",
    "    kms_in_numbers = int(kms.split()[0].replace(\",\", \"\"))\n",
    "    return kms_in_numbers\n",
    "\n",
    "df[\"kms_driven\"] = df[\"kms_driven\"].apply(lambda i: np.nan if pd.isna(i) else convert_km_to_numbers(i))\n",
    "df[\"kms_driven\"].fillna(df[\"kms_driven\"].mean())\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "cf5227ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Petrol      2969\n",
       "Diesel      2412\n",
       "Cng           80\n",
       "Lpg           28\n",
       "Electric      14\n",
       "Name: fuel_type, dtype: int64"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"fuel_type\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "fb2091c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>Manual</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0       Manual  1st Owner   \n",
       "1     Renault            1283000.0     13248.0    Automatic  1st Owner   \n",
       "2      Toyota            1640000.0     60343.0    Automatic  1st Owner   \n",
       "3       Honda             777000.0     26696.0    Automatic  1st Owner   \n",
       "4  Volkswagen             515000.0     69414.0       Manual  1st Owner   \n",
       "\n",
       "   manufacture   engine    Seats  Cng  Diesel  Electric  Lpg  \n",
       "0       2017.0  1956 cc  5 Seats    0       1         0    0  \n",
       "1       2021.0  1330 cc  5 Seats    0       0         0    0  \n",
       "2       2016.0  2494 cc  5 Seats    0       0         0    0  \n",
       "3       2018.0  1199 cc  5 Seats    0       0         0    0  \n",
       "4       2016.0  1199 cc  5 Seats    0       0         0    0  "
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col_OHE = pd.get_dummies(df[\"fuel_type\"])\n",
    "col_OHE.pop(col_OHE.columns[-1])\n",
    "df = pd.concat([df, col_OHE], axis=1)\n",
    "df = df.drop(\"fuel_type\", axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "c0a517b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Manual       3959\n",
       "Automatic    1544\n",
       "Name: transmission, dtype: int64"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"transmission\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "7b64f982",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1st Owner</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven  transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0             0  1st Owner   \n",
       "1     Renault            1283000.0     13248.0             1  1st Owner   \n",
       "2      Toyota            1640000.0     60343.0             1  1st Owner   \n",
       "3       Honda             777000.0     26696.0             1  1st Owner   \n",
       "4  Volkswagen             515000.0     69414.0             0  1st Owner   \n",
       "\n",
       "   manufacture   engine    Seats  Cng  Diesel  Electric  Lpg  \n",
       "0       2017.0  1956 cc  5 Seats    0       1         0    0  \n",
       "1       2021.0  1330 cc  5 Seats    0       0         0    0  \n",
       "2       2016.0  2494 cc  5 Seats    0       0         0    0  \n",
       "3       2018.0  1199 cc  5 Seats    0       0         0    0  \n",
       "4       2016.0  1199 cc  5 Seats    0       0         0    0  "
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"transmission\"] = df[\"transmission\"].astype(\"category\").cat.codes\n",
    "df[\"transmission\"] = df[\"transmission\"].apply(lambda x: 1 if x == 0 else 0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "70907651",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1st Owner    3730\n",
       "2nd Owner    1310\n",
       "3rd Owner     357\n",
       "4th Owner      84\n",
       "5th Owner      12\n",
       "0th Owner       7\n",
       "9th Owner       1\n",
       "7th Owner       1\n",
       "5st Owner       1\n",
       "Name: ownership, dtype: int64"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"ownership\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "4ac92364",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2017.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2021.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2018.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven  transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0             0          1   \n",
       "1     Renault            1283000.0     13248.0             1          1   \n",
       "2      Toyota            1640000.0     60343.0             1          1   \n",
       "3       Honda             777000.0     26696.0             1          1   \n",
       "4  Volkswagen             515000.0     69414.0             0          1   \n",
       "\n",
       "   manufacture   engine    Seats  Cng  Diesel  Electric  Lpg  \n",
       "0       2017.0  1956 cc  5 Seats    0       1         0    0  \n",
       "1       2021.0  1330 cc  5 Seats    0       0         0    0  \n",
       "2       2016.0  2494 cc  5 Seats    0       0         0    0  \n",
       "3       2018.0  1199 cc  5 Seats    0       0         0    0  \n",
       "4       2016.0  1199 cc  5 Seats    0       0         0    0  "
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_ownership(ownership):\n",
    "    ownership_in_int = int(ownership.split()[0][0])\n",
    "    return ownership_in_int\n",
    "\n",
    "df[\"ownership\"] = df[\"ownership\"].apply(get_ownership)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "4e150b90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017.0    628\n",
       "2015.0    527\n",
       "2018.0    521\n",
       "2019.0    490\n",
       "2016.0    468\n",
       "2014.0    459\n",
       "2013.0    371\n",
       "2020.0    346\n",
       "2021.0    340\n",
       "2012.0    300\n",
       "2011.0    263\n",
       "2010.0    217\n",
       "2022.0    144\n",
       "2009.0    132\n",
       "2008.0    113\n",
       "2007.0     60\n",
       "2006.0     42\n",
       "2005.0     28\n",
       "2004.0     16\n",
       "2002.0     13\n",
       "2003.0      8\n",
       "2000.0      4\n",
       "1998.0      2\n",
       "2001.0      2\n",
       "1809.0      1\n",
       "1995.0      1\n",
       "2023.0      1\n",
       "1921.0      1\n",
       "2027.0      1\n",
       "2109.0      1\n",
       "2030.0      1\n",
       "2025.0      1\n",
       "1999.0      1\n",
       "Name: manufacture, dtype: int64"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"manufacture\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "cdd93995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199 cc</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven  transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0             0          1   \n",
       "1     Renault            1283000.0     13248.0             1          1   \n",
       "2      Toyota            1640000.0     60343.0             1          1   \n",
       "3       Honda             777000.0     26696.0             1          1   \n",
       "4  Volkswagen             515000.0     69414.0             0          1   \n",
       "\n",
       "   manufacture   engine    Seats  Cng  Diesel  Electric  Lpg  \n",
       "0          6.0  1956 cc  5 Seats    0       1         0    0  \n",
       "1          2.0  1330 cc  5 Seats    0       0         0    0  \n",
       "2          7.0  2494 cc  5 Seats    0       0         0    0  \n",
       "3          5.0  1199 cc  5 Seats    0       0         0    0  \n",
       "4          7.0  1199 cc  5 Seats    0       0         0    0  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_age(year):\n",
    "    age = 2023 - year\n",
    "    return age\n",
    "\n",
    "df[\"manufacture\"] = df[\"manufacture\"].apply(get_age)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "dd29508a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494.0</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5 Seats</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven  transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0             0          1   \n",
       "1     Renault            1283000.0     13248.0             1          1   \n",
       "2      Toyota            1640000.0     60343.0             1          1   \n",
       "3       Honda             777000.0     26696.0             1          1   \n",
       "4  Volkswagen             515000.0     69414.0             0          1   \n",
       "\n",
       "   manufacture  engine    Seats  Cng  Diesel  Electric  Lpg  \n",
       "0          6.0  1956.0  5 Seats    0       1         0    0  \n",
       "1          2.0  1330.0  5 Seats    0       0         0    0  \n",
       "2          7.0  2494.0  5 Seats    0       0         0    0  \n",
       "3          5.0  1199.0  5 Seats    0       0         0    0  \n",
       "4          7.0  1199.0  5 Seats    0       0         0    0  "
      ]
     },
     "execution_count": 173,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_cc(cc):\n",
    "    cc_in_int = int(cc.split()[0])\n",
    "    return cc_in_int\n",
    "\n",
    "df[\"engine\"] = df[\"engine\"].apply(lambda i: np.nan if pd.isna(i) else get_cc(i))\n",
    "df[\"engine\"].fillna(df[\"engine\"].mean())\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "f6d3833c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>car_name</th>\n",
       "      <th>car_prices_in_rupee</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jeep</td>\n",
       "      <td>1003000.0</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Renault</td>\n",
       "      <td>1283000.0</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Toyota</td>\n",
       "      <td>1640000.0</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Honda</td>\n",
       "      <td>777000.0</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Volkswagen</td>\n",
       "      <td>515000.0</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     car_name  car_prices_in_rupee  kms_driven  transmission  ownership  \\\n",
       "0        Jeep            1003000.0     86226.0             0          1   \n",
       "1     Renault            1283000.0     13248.0             1          1   \n",
       "2      Toyota            1640000.0     60343.0             1          1   \n",
       "3       Honda             777000.0     26696.0             1          1   \n",
       "4  Volkswagen             515000.0     69414.0             0          1   \n",
       "\n",
       "   manufacture  engine  Seats  Cng  Diesel  Electric  Lpg  \n",
       "0          6.0  1956.0      5    0       1         0    0  \n",
       "1          2.0  1330.0      5    0       0         0    0  \n",
       "2          7.0  2494.0      5    0       0         0    0  \n",
       "3          5.0  1199.0      5    0       0         0    0  \n",
       "4          7.0  1199.0      5    0       0         0    0  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def get_seat(seat):\n",
    "    seat_in_int = int(seat.split()[0])\n",
    "    return seat_in_int\n",
    "\n",
    "df[\"Seats\"] = df[\"Seats\"].apply(get_seat)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "93688403",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Audi</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Bentley</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Datsun</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Force</th>\n",
       "      <th>Ford</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>...</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Audi  BMW  Bentley  Chevrolet  Datsun  Fiat  Force  Ford  Honda  Hyundai  \\\n",
       "0     0    0        0          0       0     0      0     0      0        0   \n",
       "1     0    0        0          0       0     0      0     0      0        0   \n",
       "2     0    0        0          0       0     0      0     0      0        0   \n",
       "3     0    0        0          0       0     0      0     0      1        0   \n",
       "4     0    0        0          0       0     0      0     0      0        0   \n",
       "\n",
       "   ...  kms_driven  transmission  ownership  manufacture  engine  Seats  Cng  \\\n",
       "0  ...     86226.0             0          1          6.0  1956.0      5    0   \n",
       "1  ...     13248.0             1          1          2.0  1330.0      5    0   \n",
       "2  ...     60343.0             1          1          7.0  2494.0      5    0   \n",
       "3  ...     26696.0             1          1          5.0  1199.0      5    0   \n",
       "4  ...     69414.0             0          1          7.0  1199.0      5    0   \n",
       "\n",
       "   Diesel  Electric  Lpg  \n",
       "0       1         0    0  \n",
       "1       0         0    0  \n",
       "2       0         0    0  \n",
       "3       0         0    0  \n",
       "4       0         0    0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car_name_OHE = pd.get_dummies(df[\"car_name\"])\n",
    "car_name_OHE = car_name_OHE.drop(car_name_OHE.columns[-1], axis=1)\n",
    "df = pd.concat([car_name_OHE, df], axis=1)\n",
    "df = df.drop(\"car_name\", axis=1)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "0de8551d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Audi', 'BMW', 'Bentley', 'Chevrolet', 'Datsun', 'Fiat', 'Force',\n",
       "       'Ford', 'Honda', 'Hyundai', 'Isuzu', 'Jaguar', 'Jeep', 'Kia', 'Land',\n",
       "       'Lexus', 'MG', 'Mahindra', 'Maruti', 'Maserati', 'Mercedes-Benz',\n",
       "       'Mini', 'Mitsubishi', 'Nissan', 'Porsche', 'Premier', 'Renault',\n",
       "       'Skoda', 'Tata', 'Toyota', 'Volkswagen', 'car_prices_in_rupee',\n",
       "       'kms_driven', 'transmission', 'ownership', 'manufacture', 'engine',\n",
       "       'Seats', 'Cng', 'Diesel', 'Electric', 'Lpg'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "a0324d4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Audi</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Bentley</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Datsun</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Force</th>\n",
       "      <th>Ford</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>...</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.485000e+03</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5490.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "      <td>5503.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.030165</td>\n",
       "      <td>0.031256</td>\n",
       "      <td>0.000182</td>\n",
       "      <td>0.014901</td>\n",
       "      <td>0.004361</td>\n",
       "      <td>0.003089</td>\n",
       "      <td>0.000182</td>\n",
       "      <td>0.030529</td>\n",
       "      <td>0.090133</td>\n",
       "      <td>0.184990</td>\n",
       "      <td>...</td>\n",
       "      <td>6.343951e+04</td>\n",
       "      <td>0.280574</td>\n",
       "      <td>1.424314</td>\n",
       "      <td>7.580956</td>\n",
       "      <td>1535.582514</td>\n",
       "      <td>5.252589</td>\n",
       "      <td>0.014538</td>\n",
       "      <td>0.438306</td>\n",
       "      <td>0.002544</td>\n",
       "      <td>0.005088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.171058</td>\n",
       "      <td>0.174024</td>\n",
       "      <td>0.013480</td>\n",
       "      <td>0.121168</td>\n",
       "      <td>0.065902</td>\n",
       "      <td>0.055500</td>\n",
       "      <td>0.013480</td>\n",
       "      <td>0.172053</td>\n",
       "      <td>0.286398</td>\n",
       "      <td>0.388325</td>\n",
       "      <td>...</td>\n",
       "      <td>4.426322e+04</td>\n",
       "      <td>0.449321</td>\n",
       "      <td>0.715694</td>\n",
       "      <td>5.143306</td>\n",
       "      <td>602.205834</td>\n",
       "      <td>0.732099</td>\n",
       "      <td>0.119703</td>\n",
       "      <td>0.496224</td>\n",
       "      <td>0.050379</td>\n",
       "      <td>0.071156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.500000e+02</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-86.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3.308800e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>5.921500e+04</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1396.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8.434600e+04</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.120000e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>214.000000</td>\n",
       "      <td>10997.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Audi          BMW      Bentley    Chevrolet       Datsun  \\\n",
       "count  5503.000000  5503.000000  5503.000000  5503.000000  5503.000000   \n",
       "mean      0.030165     0.031256     0.000182     0.014901     0.004361   \n",
       "std       0.171058     0.174024     0.013480     0.121168     0.065902   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "75%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
       "\n",
       "              Fiat        Force         Ford        Honda      Hyundai  ...  \\\n",
       "count  5503.000000  5503.000000  5503.000000  5503.000000  5503.000000  ...   \n",
       "mean      0.003089     0.000182     0.030529     0.090133     0.184990  ...   \n",
       "std       0.055500     0.013480     0.172053     0.286398     0.388325  ...   \n",
       "min       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
       "25%       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
       "50%       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
       "75%       0.000000     0.000000     0.000000     0.000000     0.000000  ...   \n",
       "max       1.000000     1.000000     1.000000     1.000000     1.000000  ...   \n",
       "\n",
       "         kms_driven  transmission    ownership  manufacture        engine  \\\n",
       "count  5.485000e+03   5503.000000  5503.000000  5503.000000   5490.000000   \n",
       "mean   6.343951e+04      0.280574     1.424314     7.580956   1535.582514   \n",
       "std    4.426322e+04      0.449321     0.715694     5.143306    602.205834   \n",
       "min    2.500000e+02      0.000000     0.000000   -86.000000      0.000000   \n",
       "25%    3.308800e+04      0.000000     1.000000     5.000000   1197.000000   \n",
       "50%    5.921500e+04      0.000000     1.000000     7.000000   1396.000000   \n",
       "75%    8.434600e+04      1.000000     2.000000    10.000000   1950.000000   \n",
       "max    1.120000e+06      1.000000     9.000000   214.000000  10997.000000   \n",
       "\n",
       "             Seats          Cng       Diesel     Electric          Lpg  \n",
       "count  5503.000000  5503.000000  5503.000000  5503.000000  5503.000000  \n",
       "mean      5.252589     0.014538     0.438306     0.002544     0.005088  \n",
       "std       0.732099     0.119703     0.496224     0.050379     0.071156  \n",
       "min       2.000000     0.000000     0.000000     0.000000     0.000000  \n",
       "25%       5.000000     0.000000     0.000000     0.000000     0.000000  \n",
       "50%       5.000000     0.000000     0.000000     0.000000     0.000000  \n",
       "75%       5.000000     0.000000     1.000000     0.000000     0.000000  \n",
       "max      15.000000     1.000000     1.000000     1.000000     1.000000  \n",
       "\n",
       "[8 rows x 42 columns]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "7de174d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Audi                    0\n",
       "BMW                     0\n",
       "Bentley                 0\n",
       "Chevrolet               0\n",
       "Datsun                  0\n",
       "Fiat                    0\n",
       "Force                   0\n",
       "Ford                    0\n",
       "Honda                   0\n",
       "Hyundai                 0\n",
       "Isuzu                   0\n",
       "Jaguar                  0\n",
       "Jeep                    0\n",
       "Kia                     0\n",
       "Land                    0\n",
       "Lexus                   0\n",
       "MG                      0\n",
       "Mahindra                0\n",
       "Maruti                  0\n",
       "Maserati                0\n",
       "Mercedes-Benz           0\n",
       "Mini                    0\n",
       "Mitsubishi              0\n",
       "Nissan                  0\n",
       "Porsche                 0\n",
       "Premier                 0\n",
       "Renault                 0\n",
       "Skoda                   0\n",
       "Tata                    0\n",
       "Toyota                  0\n",
       "Volkswagen              0\n",
       "car_prices_in_rupee     0\n",
       "kms_driven             18\n",
       "transmission            0\n",
       "ownership               0\n",
       "manufacture             0\n",
       "engine                 13\n",
       "Seats                   0\n",
       "Cng                     0\n",
       "Diesel                  0\n",
       "Electric                0\n",
       "Lpg                     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "9b73df7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df[\"kms_driven\"] = df[\"kms_driven\"].fillna(value=df[\"kms_driven\"].mean())\n",
    "df[\"engine\"] = df[\"engine\"].fillna(value=df[\"engine\"].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "744cbfc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5503, 42)"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "84678c2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAERCAYAAAB2CKBkAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy88F64QAAAACXBIWXMAAAsTAAALEwEAmpwYAAAofElEQVR4nO3df5RcdX3/8ed7NxOyIZgNgqkswYDG8EVTEtkDWDztBisJUiEHUaBgWyqm37Z4itq04YtfBGy/pM1Rsae0NlpOa1USoLgNgg0q2dov3/Ij6SaERCLhh5AFASUbCFnIZPf9/WPuJLOz987cnZk7v+7rcc6enbn3zsznc3+97+fH/Vxzd0REJL06Gp0AERFpLAUCEZGUUyAQEUk5BQIRkZRTIBARSTkFAhGRlGvJQGBmt5rZS2b2WMzlP25mO8xsu5l9J+n0iYi0EmvF+wjM7NeBfcA33f29ZZadB9wOnO3ue8zsbe7+Uj3SKSLSClqyRODuPwZeKZxmZu80s383s81m9p9mdnIw61PALe6+J/isgoCISIGWDAQR1gCfdvfTgD8F/i6Y/m7g3Wb2gJk9aGZLG5ZCEZEmNKXRCagFM5sB/Bpwh5nlJx8R/J8CzAP6gOOBH5vZAncfrnMyRUSaUlsEAnIlm2F3XxgybzfwkLtngafN7KfkAsMjdUyfiEjTaouqIXd/ldxJ/mMAlnNqMLufXGkAMzuGXFXRUw1IpohIU2rJQGBmtwH/Bcw3s91m9kngMuCTZrYV2A5cECy+Afilme0ANgIr3P2XjUi3iEgzasnuoyIiUjstWSIQEZHaabnG4mOOOcbnzp1b0Wdff/11jjzyyNomqIm0c/6Ut9akvDWPzZs3/8Ldjw2b13KBYO7cuWzatKmizw4MDNDX11fbBDWRds6f8taalLfmYWY/i5qnqiERkZRTIBARSTkFAhGRlFMgEBFJOQUCEZGUa7leQ82gf3CI1Rt28vzwCMd1d7FiyXyWLeppdLJERCqiQDBJ/YNDXHPXNkayowAMDY9wzV3bABQMRKQlqWpoklZv2HkoCOSNZEdZvWFng1IkIlIdBYJJen54ZFLTRUSanQLBJB3X3TWp6SIizU6BYJJWLJlPV6Zz3LSuTCcrlsxvUIpERKqjxuJJyjcIq9eQiLQLBYIKLFvUoxO/iLQNVQ2JiKScAoGISMopEIiIpJwCgYhIyikQiIiknAKBiEjKKRCIiKScAoGISMopEIiIpJwCgYhIyikQiIiknAKBiEjKKRCIiKRcYoHAzG41s5fM7LGI+WZmf2Nmu8zsUTN7X1JpERGRaEmWCP4JWFpi/rnAvOBvOfD3CaZFREQiJBYI3P3HwCslFrkA+KbnPAh0m9nbk0qPiIiEa+SDaXqA5wre7w6mvVC8oJktJ1dqYPbs2QwMDFT0g/v27av4s62gnfOnvLUm5a01tMQTytx9DbAGoLe31/v6+ir6noGBASr9bCto5/wpb61JeWsNjew1NATMKXh/fDBNRETqqJGBYD3wO0HvoTOBve4+oVpIRESSlVjVkJndBvQBx5jZbuALQAbA3b8G3At8GNgF7AeuSCotIiISLbFA4O6XlpnvwB8n9fsiIhKP7iwWEUk5BQIRkZRTIBARSTkFAhGRlFMgEBFJOQUCEZGUUyAQEUk5BQIRkZRTIBARSTkFAhGRlFMgEBFJOQUCEZGUUyAQEUk5BQIRkZRTIBARSTkFAhGRlFMgEBFJOQUCEZGUUyAQEUk5BQIRkZRTIBARSTkFAhGRlFMgEBFJOQUCEZGUUyAQEUk5BQIRkZRTIBARSblEA4GZLTWznWa2y8xWhsw/wcw2mtmgmT1qZh9OMj0iIjJRYoHAzDqBW4BzgVOAS83slKLFPg/c7u6LgEuAv0sqPSIiEi7JEsHpwC53f8rdDwBrgQuKlnHgLcHrmcDzCaZHRERCmLsn88VmFwFL3f3K4P0ngDPc/aqCZd4O3AfMAo4EftPdN4d813JgOcDs2bNPW7t2bUVp2rdvHzNmzKjos62gnfOnvLUm5a15LF68eLO794bNm1LvxBS5FPgnd/+Smb0f+Bcze6+7jxUu5O5rgDUAvb293tfXV9GPDQwMUOlnW0E75095a03KW2tIsmpoCJhT8P74YFqhTwK3A7j7fwHTgGMSTJOIiBRJMhA8AswzsxPNbCq5xuD1Rcs8C3wQwMz+B7lA8HKCaRIRkSKJBQJ3PwhcBWwAfkKud9B2M7vRzM4PFvsc8Ckz2wrcBvyeJ9VoISIioRJtI3D3e4F7i6ZdV/B6B3BWkmkQEZHSdGexiEjKKRCIiKScAoGISMopEIiIpJwCgYhIyikQiIiknAKBiEjKKRCIiKScAoGISMopEIiIpFysISbM7NeAuYXLu/s3E0qTiIjUUdlAYGb/ArwT2AKMBpMdUCAQEWkDcUoEvcApGhVURKQ9xWkjeAz4laQTIiIijRGnRHAMsMPMHgbezE909/OjPyIiIq0iTiC4PulEiIhI45QNBO7+H2b2DmCeu//QzKYDncknTURE6qFsG4GZfQq4E/iHYFIP0J9gmkREpI7iNBb/MbnHSb4K4O5PAG9LMlEiIlI/cQLBm+5+IP/GzKaQu49ARETaQJxA8B9m9r+ALjP7EHAHcHeyyRIRkXqJEwhWAi8D24A/AO4FPp9kokREpH7idB9dBnzT3b+ecFpERKQB4pQIPgL81Mz+xcx+K2gjEBGRNlE2ELj7FcC7yLUNXAo8aWbfSDphIiJSH7Gu7t09a2bfJ9dbqItcddGVCaZLRETqJM4NZeea2T8BTwAfBb5BzEHozGypme00s11mtjJimY+b2Q4z225m35lE2kVEpAbilAh+B1gH/IG7v1lu4Twz6wRuAT4E7AYeMbP17r6jYJl5wDXAWe6+x8x0o5qISJ3FGWvo0gq/+3Rgl7s/BWBma4ELgB0Fy3wKuMXd9wS/9VKFvyUiIhWyqOfNmNn/dfcPmNlrjL+T2AB397eU/GKzi4Cl7n5l8P4TwBnuflXBMv3AT8kNYdEJXO/u/x7yXcuB5QCzZ88+be3atfFzWGDfvn3MmDGjos+2gnbOn/LWmpS35rF48eLN7t4bNi+yRODuHwj+H5VUwoLfnwf0AccDPzazBe4+XJSWNcAagN7eXu/r66voxwYGBqj0s62gnfOnvLUm5a01lGwsNrNOM3u8wu8eAuYUvD8+mFZoN7De3bPu/jS50sG8Cn9PREQqUDIQuPsosNPMTqjgux8B5pnZiWY2FbgEWF+0TD+50gBmdgzwbuCpCn5LREQqFKfX0Cxge/CoytfzE8s9qtLdD5rZVcAGcvX/t7r7djO7Edjk7uuDeeeY2Q5gFFjh7r+sMC/SJPoHh1i9YSfPD49wXHcXK5bMZ9minkYnS0QixAkE/7vSL3f3e8kNUlc47bqC1w58NviTNtA/OMQ1d21jJDsKwNDwCNfctQ1AwUCkScV6VGU9EiLtYfWGnYeCQN5IdpTVG3YqEEjLSUvpNjIQhHQbHadc91FJp+eHRyY1XaRZpal0G9lY7O5HBSf7r5J7JkEPuZ4/fw7cXJfUScs5rrtrUtNFmlWp0m27iTMM9fnu/nfu/pq7v+ruf0/uDmGRCVYsmU9XpnPctK5MJyuWzG9QikQqk6bSbZxA8LqZXRbcU9BhZpdR0HtIpNCyRT3cdOECerq7MKCnu4ubLlzQdkVpaX9pKt3G6TX02+Sqh75Krs3ggWCaSKhli3p04peWt2LJ/HFtBNC+pds4vYaeQVVBIpIy+YuZVPcaEhFJu7SUbuO0EYiISBtTIBARSbnIQGBmHzGzdxS8v87MtprZejM7sT7JExGRpJUqEfwl8DKAmf0WcDnw++RGEP1a8kkTEZF6KBUI3N33B68vBP7R3Te7+zeAY5NPmoiI1EOpQGBmNsPMOoAPAj8qmDct2WSJiEi9lOo+ejOwBXgV+Im7bwIws0XAC4mnTERE6qLUM4tvNbMNwNuArQWzfg5ckXTCRESkPkoNQ/2+grcLzax4kWcTSZGIiNRVqaqhTcBjwC+C94WRwIGzk0qUiIjUT6lA8FngImAEWAt819331SVVIiJSN6UeTHOzu38A+DQwB/iRmd1uZgvrlTgREUle2SEm3P0p4N+A+4DTgXcnnSgREamfUo3FJwGXkBuC+jly1UP/x93b7/E8IgXS8sBykbxSbQS7gEfJlQZeBU4A/jDfe8jdv5x46kTqLE0PLBfJK1U1dCPwXWAMmAEcVfA3I/mkidRfmh5YLpJXqkTwj+7+XNiMYBA6kbaTpgeWi+SVKhH8wMzmFk80syvIPb9YpO2k6YHlInmlAsFngfvMbF5+gpldE0z/jThfbmZLzWynme0ys5UllvuombmZ9cZNuEgSViyZT1emc9y0yT6wvH9wiLNW3c+JK+/hrFX30z84VOtkitRUqbGG7jWzN4Hvm9ky4Epy3Ud/3d33lPtiM+sEbgE+BOwGHjGz9e6+o2i5o4A/AR6qOBciNVLtA8vV2CytqOTD6939R0FV0ADw/4Cz3f2NmN99OrAruA8BM1tLrivqjqLlvgj8FbBiEukWSUw1Dywv1disQCDNytw9fIbZa+TGFDLgCCALjAbv3d3fUvKLzS4Clrr7lcH7TwBnuPtVBcu8D7jW3T9qZgPAn+aHuy76ruXAcoDZs2eftnbt2snmE4B9+/YxY0b7dnhq5/y1St62De2NnLegZ2bo9FbJWyWUt+axePHize4eWv1eqmroqOSSBMEDb74M/F65Zd19DbAGoLe31/v6+ir6zYGBASr9bLMJu+mpmyfaJn/FWmXbXbvqfoZCehj1dHfx6cv6Qj/TKnmrhPLWGsoOMVGFIXJjFOUdH0zLOwp4LzBgZs8AZwLr1WBcXr4eemh4BOdwPfTwSLbRSUu9WjQ2J02N2VKsZBtBlR4B5pnZieQCwCXAb+dnuvte4Jj8+1JVQzJeVD30i3sVCBqt2sbmpKkxW8IkFgjc/aCZXQVsADqBW919u5ndCGxy9/VJ/Xa7i7q56cDoWJ1TImGqaWxOmhqzJUySJQLc/V7g3qJp10Us25dkWtrJcd1dofXQUzuTrOmTdqA7p+uvFQYx1JmjBUXVQ8+eOa1BKZJWoTun6yuqPa/Z2mUUCFrQskU93HThAnq6uzByPVJuunAB3V2ZRidNmlwrNGa3k1YZxDDRqiFJTlg99MDAEw1KjbSKZm/MbjetUhWnQCCSMs3cmN1uotrzmq0qTlVDIiIJaZWqOJUIpGFaoTeFSDVapSpOgUAaoh1vbFJgkzCtUBWnQCAN0W43NiUd2BRkJElqI5CGaJXeFHEl2U2wVfqiS+tSiUAaohV6U0zmKjzJwDaZ0pNKDlIJlQgSohEeS2v23hSTvQpP8o7duEEmLM1Xr9vCohvv0/5XA8XHdDuN9qsSQZXCrsCAtmsIrbV69qao5Cp5sm0YK5bMH7fNoXaBLW7pKSzNAHv2Z7X/VSmsDWhozyj9g0NtsU4VCKoQ1UA4LdPRVg2hSalHb4pKG3EnW9WTZGCLG2RKVUNp/6tOWJAdc2+bdapAUIWoq8awqzJo3YbQVlZp76RK2jCSCmxxg0xUmvMq3f/U7tB+nRuKKRBUYbI7QTM1hKZFpQdwklU9lYgTZMLSXKiS/a+abrH9g0O8+PPXuGLlPU0TQPJBbWh4hE4zRt3piZG2VujcUA01Flchaifo7so0dUNomlTaiBs1wmujT2Sl5NMcNgptpftfpd1i8wHkwOhY03R5LWxMBxh1h5hpC+vc0GHWNse0SgRViLpqvP789wDJN4ROKLKfGn4lmGbVXNm3wh2hxfJprlV1TqUlqma8YTCqMR3Kpy2seq5n1mjL7R9RFAiqUK7uNsmdpN17MdRKq4z1Umu1CmKVVok0Y516ud8uN794nQ4MDNQiWU1BgaBKjbpqbPdeDNUIuxp+YOXZjU5WS6q0RNWMderlGtPbpb6/EmojaFHNeMXVDDQcQ21V2lbSjDcMhqUpLyptabkxVCWCFtWMV1yNUlgC6Ah6ghRqdN10q6uk1Jtf/sWd/41BRVVyte62WlhNGKfXUDuOkBtFgaBFhRXZ26kXQ1zFB2txEMhrl5JSrU6O9bg3YNmiHgb2PsHTq/oqSl8SJ+FyQS2tFxUKBC2q3XsxxFWqJ0ihVi0pFZ6YZnZleP3AQbKj47s9wuROjv2DQ6y4YyvZscPfs+KOrZP+niQ1otdR2i4qCikQ1Fg978Js514MccU5KBtdN12p4hNT2CBnlZwcr1+//VAQyMuOOdev3940gaARbWDtflFRigJBDTW6TnF4JMtZq+5PVTfJqLaSTjPG3JtyPcS9/yPuiWmyJ8eoUTNrOZpmPo+XzHmNa1fdP+lt0Ig2sMleVEQdb604JId6DdVQkg8nKad/cIihPSNt1Vumf3CIhTfcx9yV97BtaG/ocMorlswn02njpmU6jS99/FSeXnUeD6w8u6kOwrBeTUN7RkK3U9wTfNyTY74HTNKK7+CtZF+M2+uolr16otZjp9mEHlNRx9vn+7e1ZK+1RAOBmS01s51mtsvMVobM/6yZ7TCzR83sR2b2jiTTk7RGdum84e7tjEU0bLWifD124VXqnv1ZVty5deJBVVyVG1612xRK3f9RLM4J3sidbMJOgoUnyYU33MeKO7eW7Ec/a/rEoSkqUYsLojjdVmvdVTgq+IRdVKzesDP0eLvtoecadjFYjcSqhsysE7gF+BCwG3jEzNa7+46CxQaBXnffb2Z/CPw1cHFSaUpao7p09g8OsWd/eLG+GRu24hSdV2/YOaEeGyA7Ov6mubDlsmPRN9Y1uthe7mKhuHE402mHGocBMh3GjGlT2LM/i3E45hVXQ8ZpXyiU6TS+8JH3VJyvwnRHxeHJ7otRPXwKB44rNpIdrbito7gDxsyuDGbwmXVbWL1h57h95fnhEZgz8TtatYE5yRLB6cAud3/K3Q8Aa4ELChdw943uvj94+yBwfILpSVwSN9HEKfqWutrortFVXq3EvYordeAUzptMKawZnuBVahC84vQNj2TBc1fq+avi1R87lcHrzqGnu2vCCbfwyjNu+wL5773o1IoDYnG6o8wMGQyvmt+KMjySrXh7LlvUwwMrz+YrFy/kzYNj7NmfDd1PS1UjhXFo6hvSkgwEPcBzBe93B9OifBL4foLpiaWaOsdaj1hZi5NmxAVKw8StNihViiqcN5nRRcs9waseB2mpUSzD0pcdc6ZPnTKhaqJcAIx7BdrT3VV1O0rcoPPqG5WfoCf7W9VWxZTbT1csmU9H0Um/K9PJmSfNivzOqOO3Ge5eNk/oTGFmFwFL3f3K4P0ngDPc/aqQZS8HrgJ+w93fDJm/HFgOMHv27NPWrl1bUZr27dvHjBkzIucPj2QZ2jMyru6vw4yeWV2hQ/smbefPX+PA6NiE6YbhOFM7O5g9cxov7n2DA6NjzO6CF0OO/wU9M+uQ2ni2De2NnFeYzuGRLLtfGcGDa8x83syM4wu2R9Q2mzU9w2tvHOTA6Nih9fTcK/spZWpnB/N/5ahqshfL8Ej20Dab2tnB7OnQ/ZajYq8biN438nmIml9sztHTAcanZ+a0WPt7YT6iFO+TUdumuyszcb2EpKPUOipWzX4fZ1sMv/oaL+7nUHqPCqrsitsOihXuZ/U85yxevHizu/eGzUuy++gQ42vRjg+mjWNmvwlcS0QQAHD3NcAagN7eXu/r66soQQMDA5T67Fmr7mdoeOJYJD3dnTywsrLfrMYVK+/ByxTaujKjfPS0uXzrwWf53IKDfGnb+E06a3qGwcv6EkxlTty692tX3R9arO/p7uLTRensHxzi+vXbGR7JHsrbrOkZvvCRU+grajQs/O3FJx/L324eYiTbQb7Q25UZZVqmK7It5bDXAYLfeU9d2g/y++Vk1s1wURsA5K5Ib7pwAX2Levhh/za+9eCzZX/78jN/hX8NWVc3XXhK2Ttwr/nRtnGfCxO2TxpjwX59+Pc+elq8dESto2I93V3MOWVeRe1B/YNDfPnft4RWcxVui4GBAZad33doXu78UT74Ghy627pZzjlJVg09AswzsxPNbCpwCbC+cAEzWwT8A3C+u7+UYFpiabaB3OI0Mo9kR/ne1hci59ejamgyvTcm046ybFEP15//HjIdh4vge/ZnWXHH+J5D+XrdfPXJxsdfDi3W5xtY44jsoVRD+SqBbUN7WXjDfex5feJ1UFemk8UnHzuh6qBcNeTGx1+OlYZKe7lMpg2iWFjbxrcefDZWOkoNHJeXX2eV9ii64e7toUHAgt8v3G6FVTmVdPdtlnNOYiUCdz9oZlcBG4BO4FZ3325mNwKb3H09sBqYAdxhufq2Z939/KTSVE6zDeRW7tGDeaV6hOyt4U1CUSYzHMBknw9QyV2wpa4YJxMXi3soVSOs1JK7Ah6FOeHbcNb0DOf96tsPL8fE3kFRvWriXDXD5Hq5xOkZBIzrzVSt4nQsW9TDpp+9ElnayQ8gV26fjCrBluqB58DV67Yczt+cwx0Orl63hQ4rf+GVDyaQW59h4xlB/c85id5Z7O73AvcWTbuu4PVvJvn7pYTtCNU+pzbp0RIrUY8dKurqJd+/vXg9FJ/A8ldYYeut1F2wUeu7M+LgKtTdleHII6aUPanFuTIrt93D7jiPU20zfeqUyNJNqe6x+UBRjeL9pjgPUeKs+2rSAUSWgM04tO4/s25L6DJDwyMlRwCI08gclbuQ3s6hny3s3hu2rhoxJEoqh5j4fP82vv3gsxP6YN904QJuunDBpE7mhX2aS/XrrlT+s3EOwjCLTz52wrRKA1bY54CSl4Dl1kM1w3JEfS7OiWh4JMvekSzHdXex/8DByKvAUoG0sA0jL5+OTT97hY2Pvxw5imUccbvQhqWjGmEnoj//10d582Dp+u+uTGfF1UVx0wHRFwfuHFr3pdb5td+deCzlg2ulF1xxGYePo6h1ZTg33L2dq9dtKTtUdq2kLhD0Dw6NCwJ5+R1hMl3pik9iUd8Zd9jbUjdXhe00cYrg39v6An+xbEFkmoeGR/jMui1s+tkr45Yrl9f8iJWj7mWLw6XWQ1QR/jO3b+EzhcXwIhYsF/Y7PWWeRJWXrzvOdBgdNvGKLtMZPax3qSvkkezouH2s0ivkfBAqVV1ZPJJotcJOOJd9/b9KBoHC5w3U6mTaaVZR1+vidR/m9QPhJ+Dii7kkOIerRaPsz46xP5tb3/l9J+lxy1I31tDqDTtL3vk4mT69cRrMSm3wau8TiLPDFt9cE5ZmB7794LOTzmt2zGMVhyGXt+J1Wqou2z2XrqivL7UNw8YfKiU75hwxpWNcd71Z0zMlb7Iqt+2rPZnkg1BY42h+WImFN9zHZ2/fUrMgEOWBJ1+JnNfT3TXuHofJrvsoY+6R6/6IKaVPW5WujU6zuoxOkr/om6wkh6pIXYmg1Il5ZlcmsroBJj7ZKI5SGzxuI+vMoI91pW64+3DDaqmgUqr0UoteDIV3814dUYdbi9+Iqh8uZSQ7xkh2LHYRPOleHUdOnTIuDWHVj7UcLTQvbJ8vJV/1WOvqqbDjJnfhVL6KqlK1bNsoJV96quQYSGq/S10giOoZZOQam8JOzNfc9ShvZMcmXdQvrOMMqwKK23Us4q712Pbsz7LwhvvKHqRRPUWuXx/ena5ZVZPWsCJ42LYr9SD0WlQvhA1xfMPd22PcB1G9/Hg9bx4cK1vive3h3OAB6x5+rmYlk6hRRmtZBdZIYe12cXWYHeo+XEupqxqa+9bwK/R3ve1IhiMOspGCIBDXrOmZcUPWhlUBTZ8a3h+6+GooKl2TEedKLaynSPEIoMWqrwRoPoVF8Khtt/jkY0P7s8+anuGyM08o29e9nHz1T/43V9yxtS5BIG94JBur4Xd0zPnOQ8/W7ATdaXZo/RdWVYZ1I25V6x55jhvu3l7RZ0fdExkOJXUlggef2hM6/YmXXq9p17c9+7NcvW4Ln7t9K9MyHaEljTD5uuFaF7XL6TDYf+AgJ668h2mZDt48OBa7/r9YZ4cx2uIH7dDwCHNX3hM6L38D1OVnnnCoZ1D+3oDvbX0hVtfQcorXXjOfBGuZtKjG0XodB/WQHfWqgnoSj+xMTSDoHxzixZ+/xqhHF4KSqCMcdY/spRAmO5q7WerVN7I1PcDKGXMO7Zwj2fh1sGFJbPUgENe3H3yWr1y88FCpr12qLppFYe8xGa/WbQWpCAT54v0fnTxGK9SGtdPVTztz4HO3b+Uz67ZUfK+AlKZVGq7WN4qmIhBUMy6KSCn5k7+CgNRLpiP6/pZKNf/lcQ00+9OBRETiSuKiIxWBoFGDxomI1NqYw5/dubWm35mKQFBNv10RkWZzYNRr2oW07QNB/+AQ6x5+rvyCIiItpJbDTbR9IFi9Yae69IlI26nlSKltHwjUUCwi7aiz2rFnCrR9IFBDsYi0o1r2Hmr7QKCGYhFpRz01vMht+0AQ9yHeIiKtpJY3lbV9IFAbgYi0o1oOOtf2gUBtBCIipbV9IKj1mBwiIs1AN5RNQhIPehYRaTTdUDYJtX6Sj4hIM6hl+2fbB4JaRk0RkWZRy/bPtg8E6jUkIu1I3UcnoXt6ptFJEBGpuZbpPmpmS81sp5ntMrOVIfOPMLN1wfyHzGxurdOgB0eJiJSWWCAws07gFuBc4BTgUjM7pWixTwJ73P1dwFeAv6p1Ovbq+b8i0mZqObwEJFsiOB3Y5e5PufsBYC1wQdEyFwD/HLy+E/igWQ2H1EM3lIlI+6n1/VHmCdWdmNlFwFJ3vzJ4/wngDHe/qmCZx4JldgfvnwyW+UXRdy0HlgPMnj37tLVr18ZOx/BIlt2vjOA4s7vgxTZuO27n/ClvyXvrkVPZsz/LWA3PCc2StyQ0Km8GvLdn5qQ/t3jx4s3u3hs2b0q1iaoHd18DrAHo7e31vr6+SX2+f3CIa+56lD86+QBf2pZ8ljsNRhvQNvG5BQfrkr9GqHXeMh3GjGlTGN6fBWtsW1IzbLfLzzyBTy9bQP/gENev385wjapUk85bZ4fxpY+dCsA1dz3KSHYMgA6D9590NNuff61meSnWiO1mwFcuXkhfjW+UTbJqaAiYU/D++GBa6DJmNgWYCfyy1glZtqiHn3zxXOYcPZ3ursO9iGZNz3DWO48+9ICHTjMuP/MEnll1HjdfvJBMBWvn8jNP4Mmbcp/v6e7CgO6uDJnO8TVeVvS/VmZNz3DzxQu5/MwTavrgikpMz3QwvWAl5tN288ULx22H/LKzpmci11dHsG3y67Snu4uz3nl06Po7cmrnhGWL36/+2KkMXncOT686j698fCFdmc7QPHRUsQqnFuQh03H4uyxIowFdlexkRaZnOkL31cL9OsoRUzq4+eKF/MWyBUDuWNnyhXNCtxEczkN3V4bOjuJtxITt/dYjp447DmbVsBffEVM6+NLHTmXZop5Dx/gzq87jmVXn8dRN5/HtT73/UF6K95vCdXPWO4+ekMawZaH88Zpfn8+sOm/cMVh8bom73QsPg1nTM3zl4oWJjJaQZNXQFOCnwAfJnfAfAX7b3bcXLPPHwAJ3/59mdglwobt/vNT39vb2+qZNmypK08DAAJMtTeQVXynNmp7hvF99Oxsff5nnh0c4rruLFUvmR26k/sEhVm/YGbpsft7Q8AidZoy601OwTNhngQnTuvc+EZq/wu83IL/FZ03P8IWPvGdcmgt/a2ZXhgMHR9kfXGXll9/0s1e47aHnGHWn04xLz5hz6ERSKxPyfOooy879UE1/o+TvldiWYZ+Z2ZXBDIb3Z2N//tD3fP8HrN7aWXLfmEy66iVO2uIec1HfVe7YaKRqzidQ/21rZpFVQ7h7Yn/Ah8kFgyeBa4NpNwLnB6+nAXcAu4CHgZPKfedpp53mldq4cWPFn20F7Zw/5a01KW/NA9jkEefVRCu43P1e4N6iadcVvH4D+FiSaRARkdLa/s5iEREpTYFARCTlFAhERFJOgUBEJOUS6z6aFDN7GfhZhR8/BvhF2aVaVzvnT3lrTcpb83iHux8bNqPlAkE1zGyTR/WjbQPtnD/lrTUpb61BVUMiIimnQCAiknJpCwRrGp2AhLVz/pS31qS8tYBUtRGIiMhEaSsRiIhIEQUCEZGUS00gMLOlZrbTzHaZ2cpGpycOM7vVzF4KnuSWn3a0mf3AzJ4I/s8KppuZ/U2Qv0fN7H0Fn/ndYPknzOx3G5GXYmY2x8w2mtkOM9tuZn8STG/5/JnZNDN72My2Bnm7IZh+opk9FORhnZlNDaYfEbzfFcyfW/Bd1wTTd5rZkgZlaQIz6zSzQTP7XvC+nfL2jJltM7MtZrYpmNby+2VJUcOSttMf0EluKOyTgKnAVuCURqcrRrp/HXgf8FjBtL8GVgavVwJ/5YeH/P4+uWdnnAk8FEw/Gngq+D8reD2rCfL2duB9weujyA1Xfko75C9I44zgdQZ4KEjz7cAlwfSvAX8YvP4j4GvB60uAdcHrU4J99QjgxGAf7mz0tgvS9lngO8D3gvftlLdngGOKprX8flnqLy0lgtOBXe7+lLsfANYCFzQ4TWW5+4+BV4omXwD8c/D6n4FlBdO/6TkPAt1m9nZgCfADd3/F3fcAPwCWJp74Mtz9BXf/7+D1a8BPgB7aIH9BGvcFbzPBnwNnA3cG04vzls/zncAHzcyC6Wvd/U13f5rccztOTz4HpZnZ8cB5wDeC90ab5K2Elt8vS0lLIOgBnit4vzuY1opmu/sLweufA7OD11F5bPq8B9UFi8hdObdF/oKqky3AS+ROAk8Cw+5+MFikMJ2H8hDM3wu8lSbNG3Az8GfAWPD+rbRP3iAXtO8zs81mtjyY1hb7ZZT2fNJ5Sri7m1lL9/81sxnAvwJXu/urVvB82FbOn7uPAgvNrBv4LnByY1NUG2b2W8BL7r7ZzPoanJykfMDdh8zsbcAPzOzxwpmtvF9GSUuJYAiYU/D++GBaK3oxKHoS/H8pmB6Vx6bNu5llyAWBb7v7XcHktskfgLsPAxuB95OrNshffBWm81AegvkzgV/SnHk7CzjfzJ4hV8V6NvBV2iNvALj7UPD/JXJB/HTabL8slpZA8AgwL+jZMJVco9X6BqepUuuBfA+E3wX+rWD67wS9GM4E9gZF2Q3AOWY2K+jpcE4wraGCeuJ/BH7i7l8umNXy+TOzY4OSAGbWBXyIXBvIRuCiYLHivOXzfBFwv+daHNcDlwQ9b04E5pF7tnfDuPs17n68u88ldxzd7+6X0QZ5AzCzI83sqPxrcvvTY7TBfllSo1ur6/VHrnX/p+Tqaq9tdHpipvk24AUgS66O8ZPk6ld/BDwB/BA4OljWgFuC/G0Degu+5/fJNcbtAq5odL6CNH2AXF3so8CW4O/D7ZA/4FeBwSBvjwHXBdNPIney2wXcARwRTJ8WvN8VzD+p4LuuDfK8Ezi30Xkrymcfh3sNtUXegnxsDf62588V7bBflvrTEBMiIimXlqohERGJoEAgIpJyCgQiIimnQCAiknIKBCIiKadAIBLBzPaVX2rc8n350ThFWokCgYhIyikQiJQRXOkPmNmdZva4mX07uDM6/5yLx83sv4ELCz5zpOWeJ/Gw5cbtvyCY/lUzuy54vcTMfmxmOg6loTTonEg8i4D3AM8DDwBnBQ8t+Tq58XZ2AesKlr+W3HAKvx8MN/Gwmf0QuAZ4xMz+E/gb4MPuPoZIA+lKRCSeh919d3DS3gLMJTei6NPu/oTnbtH/VsHy5wArg6GoB8gNtXCCu+8HPkVuaOq/dfcn65YDkQgqEYjE82bB61HKHzsGfNTdd4bMW0BuBM7japQ2kaqoRCBSuceBuWb2zuD9pQXzNgCfLmhLWBT8fwfwOXJVTeea2Rl1TK9IKAUCkQq5+xvAcuCeoLH4pYLZXyT3iMpHzWw78MWCobf/1N2fJzea7DfMbFqdky4yjkYfFRFJOZUIRERSToFARCTlFAhERFJOgUBEJOUUCEREUk6BQEQk5RQIRERS7v8DWqsCr9TVE8AAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.index, df[\"kms_driven\"])\n",
    "plt.grid()\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"KMS driven\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "87d382dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[\"kms_driven\"].plot(kind=\"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "30df7e4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[df[\"kms_driven\"] < 400000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "770b8ecc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.index, df[\"car_prices_in_rupee\"])\n",
    "plt.grid()\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Car price\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "4849b3cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[\"car_prices_in_rupee\"].plot(kind=\"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "0664e3e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.index, df[\"engine\"])\n",
    "plt.grid()\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Engine CC\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "46829d48",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[\"engine\"].plot(kind=\"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "aeb5e723",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df[(df[\"engine\"] >= 624) & (df[\"engine\"] <= 6000)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "357e3491",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Audi</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Bentley</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Datsun</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Force</th>\n",
       "      <th>Ford</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>...</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Audi  BMW  Bentley  Chevrolet  Datsun  Fiat  Force  Ford  Honda  Hyundai  \\\n",
       "0     0    0        0          0       0     0      0     0      0        0   \n",
       "1     0    0        0          0       0     0      0     0      0        0   \n",
       "2     0    0        0          0       0     0      0     0      0        0   \n",
       "3     0    0        0          0       0     0      0     0      1        0   \n",
       "4     0    0        0          0       0     0      0     0      0        0   \n",
       "\n",
       "   ...  kms_driven  transmission  ownership  manufacture  engine  Seats  Cng  \\\n",
       "0  ...     86226.0             0          1          6.0  1956.0      5    0   \n",
       "1  ...     13248.0             1          1          2.0  1330.0      5    0   \n",
       "2  ...     60343.0             1          1          7.0  2494.0      5    0   \n",
       "3  ...     26696.0             1          1          5.0  1199.0      5    0   \n",
       "4  ...     69414.0             0          1          7.0  1199.0      5    0   \n",
       "\n",
       "   Diesel  Electric  Lpg  \n",
       "0       1         0    0  \n",
       "1       0         0    0  \n",
       "2       0         0    0  \n",
       "3       0         0    0  \n",
       "4       0         0    0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "59b2ce52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df.index, df[\"manufacture\"])\n",
    "plt.grid()\n",
    "plt.xlabel(\"Index\")\n",
    "plt.ylabel(\"Age\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "cc9962b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# df[\"manufacture\"].plot(kind=\"hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "32d70edf",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "c0175ff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Audi</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Bentley</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Datsun</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Force</th>\n",
       "      <th>Ford</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>...</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>86226.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>13248.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1330.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>60343.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2494.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>26696.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>69414.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Audi  BMW  Bentley  Chevrolet  Datsun  Fiat  Force  Ford  Honda  Hyundai  \\\n",
       "0     0    0        0          0       0     0      0     0      0        0   \n",
       "1     0    0        0          0       0     0      0     0      0        0   \n",
       "2     0    0        0          0       0     0      0     0      0        0   \n",
       "3     0    0        0          0       0     0      0     0      1        0   \n",
       "4     0    0        0          0       0     0      0     0      0        0   \n",
       "\n",
       "   ...  kms_driven  transmission  ownership  manufacture  engine  Seats  Cng  \\\n",
       "0  ...     86226.0             0          1          6.0  1956.0      5    0   \n",
       "1  ...     13248.0             1          1          2.0  1330.0      5    0   \n",
       "2  ...     60343.0             1          1          7.0  2494.0      5    0   \n",
       "3  ...     26696.0             1          1          5.0  1199.0      5    0   \n",
       "4  ...     69414.0             0          1          7.0  1199.0      5    0   \n",
       "\n",
       "   Diesel  Electric  Lpg  \n",
       "0       1         0    0  \n",
       "1       0         0    0  \n",
       "2       0         0    0  \n",
       "3       0         0    0  \n",
       "4       0         0    0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "c73f1531",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "43877695",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Audi</th>\n",
       "      <th>BMW</th>\n",
       "      <th>Bentley</th>\n",
       "      <th>Chevrolet</th>\n",
       "      <th>Datsun</th>\n",
       "      <th>Fiat</th>\n",
       "      <th>Force</th>\n",
       "      <th>Ford</th>\n",
       "      <th>Honda</th>\n",
       "      <th>Hyundai</th>\n",
       "      <th>...</th>\n",
       "      <th>kms_driven</th>\n",
       "      <th>transmission</th>\n",
       "      <th>ownership</th>\n",
       "      <th>manufacture</th>\n",
       "      <th>engine</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Cng</th>\n",
       "      <th>Diesel</th>\n",
       "      <th>Electric</th>\n",
       "      <th>Lpg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.226402</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.263158</td>\n",
       "      <td>0.250094</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.034228</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.052632</td>\n",
       "      <td>0.132557</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.158244</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.315789</td>\n",
       "      <td>0.351108</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.069641</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.210526</td>\n",
       "      <td>0.107961</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.182130</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.315789</td>\n",
       "      <td>0.107961</td>\n",
       "      <td>0.230769</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Audi  BMW  Bentley  Chevrolet  Datsun  Fiat  Force  Ford  Honda  Hyundai  \\\n",
       "0   0.0  0.0      0.0        0.0     0.0   0.0    0.0   0.0    0.0      0.0   \n",
       "1   0.0  0.0      0.0        0.0     0.0   0.0    0.0   0.0    0.0      0.0   \n",
       "2   0.0  0.0      0.0        0.0     0.0   0.0    0.0   0.0    0.0      0.0   \n",
       "3   0.0  0.0      0.0        0.0     0.0   0.0    0.0   0.0    1.0      0.0   \n",
       "4   0.0  0.0      0.0        0.0     0.0   0.0    0.0   0.0    0.0      0.0   \n",
       "\n",
       "   ...  kms_driven  transmission  ownership  manufacture    engine     Seats  \\\n",
       "0  ...    0.226402           0.0   0.111111     0.263158  0.250094  0.230769   \n",
       "1  ...    0.034228           1.0   0.111111     0.052632  0.132557  0.230769   \n",
       "2  ...    0.158244           1.0   0.111111     0.315789  0.351108  0.230769   \n",
       "3  ...    0.069641           1.0   0.111111     0.210526  0.107961  0.230769   \n",
       "4  ...    0.182130           0.0   0.111111     0.315789  0.107961  0.230769   \n",
       "\n",
       "   Cng  Diesel  Electric  Lpg  \n",
       "0  0.0     1.0       0.0  0.0  \n",
       "1  0.0     0.0       0.0  0.0  \n",
       "2  0.0     0.0       0.0  0.0  \n",
       "3  0.0     0.0       0.0  0.0  \n",
       "4  0.0     0.0       0.0  0.0  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min_max_scaler = MinMaxScaler()\n",
    "df_min_max = pd.DataFrame(min_max_scaler.fit_transform(df), columns=df.columns)\n",
    "df_min_max.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bfcc3ba",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
